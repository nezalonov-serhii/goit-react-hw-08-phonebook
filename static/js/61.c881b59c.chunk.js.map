{"version":3,"file":"static/js/61.c881b59c.chunk.js","mappings":"gQAEaA,EAAaC,EAAAA,GAAAA,IAAH,4NAaVC,EAAQD,EAAAA,GAAAA,MAAH,kZ,UCWlB,I,gBAAA,EApBA,WACE,IAAME,GAAWC,EAAAA,EAAAA,eAEXC,GAASC,EAAAA,EAAAA,cAAY,SAAAC,GAAK,OAAIA,EAAMC,WAAV,IAEhC,OACE,SAACR,EAAD,WACE,UAACE,EAAD,oCAEE,kBACEO,KAAK,OACLC,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAAIT,GAASU,EAAAA,EAAAA,GAAkBD,EAAEE,OAAOJ,OAAxC,EACXK,YAAY,eAKrB,E,uCCrBYC,EAAef,EAAAA,GAAAA,IAAH,oOAYZgB,GAAUhB,EAAAA,EAAAA,IAAOiB,EAAAA,KAAPjB,CAAH,oDAIPkB,EAAiBlB,EAAAA,GAAAA,EAAH,+CAIdmB,EAAmBnB,EAAAA,GAAAA,IAAH,iNAahBoB,EAAOpB,EAAAA,GAAAA,GAAH,4uBA2CJqB,EAAcrB,EAAAA,GAAAA,IAAH,2JAUXsB,EAAUtB,EAAAA,GAAAA,EAAH,4JASPuB,EAAcvB,EAAAA,GAAAA,IAAH,wDCaxB,MA9EA,WACE,IAAME,GAAWC,EAAAA,EAAAA,eAEXqB,GAAWnB,EAAAA,EAAAA,aAAYoB,EAAAA,gBACvBrB,GAASC,EAAAA,EAAAA,aAAYqB,EAAAA,cACrBC,GAAYtB,EAAAA,EAAAA,aAAYuB,EAAAA,iBACxBC,GAAQxB,EAAAA,EAAAA,aAAYyB,EAAAA,aACpBC,GAAO1B,EAAAA,EAAAA,aAAY2B,EAAAA,YACnBC,GAAe5B,EAAAA,EAAAA,aAAY6B,EAAAA,oBAE3BC,EAAkBC,QAAQZ,EAASa,QACnCC,EAAkBlC,EAAOmC,cACzBC,EAAkBhB,EAASpB,QAAO,SAAAqC,GAAE,OACxCA,EAAGC,KAAKH,cAAcI,SAASL,EADS,IAiB1C,OAbAM,EAAAA,EAAAA,YAAU,WACRf,GAAS3B,GAAS2C,EAAAA,EAAAA,IAAiBhB,GACpC,GAAE,CAAC3B,EAAU2B,KAYZ,gCACGI,IAAgB,SAACa,EAAA,EAAD,KACjB,UAAC/B,EAAD,YACIoB,IAAoBF,IAAiBN,IACrC,SAACR,EAAD,WACE,UAACD,EAAD,oBACSa,EAAKW,KADd,UAC2B,KACxB,SAAC1B,EAAD,CAAS+B,GAAG,kBAAZ,iBAFH,2BAOHZ,IACC,iCACE,SAAC,EAAD,KACA,SAAChB,EAAD,WACE,wBACGqB,EAAgBQ,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAIP,EAAmB,EAAnBA,KAAMQ,EAAa,EAAbA,OAChC,OACE,UAAC9B,EAAD,YACE,UAACC,EAAD,YACE,yBAAIqB,EAAJ,QAAgB,KAChB,SAACpB,EAAD,CAAS6B,KAAI,cAASD,GAAtB,SAAiCA,QAEnC,UAAC3B,EAAD,WACGI,IAAa,SAACmB,EAAA,EAAD,CAAQM,KAAM,QAC5B,mBACE5C,KAAK,SACL6C,QAAS,YAtCZ,SAAAJ,GACnB/C,GAASoD,EAAAA,EAAAA,IAAmBL,IACzBM,SACAC,MAAK,SAAAzB,GACJ0B,EAAAA,GAAAA,QAAA,UAAiB1B,EAAKW,KAAtB,2BACD,IACAgB,OAAM,kBAAMD,EAAAA,GAAAA,MAAY,uCAAlB,GACV,CAgCyBE,CAAaV,EACd,EACDW,SAAUjC,EALZ,UAOE,SAAC,MAAD,WAdKsB,EAmBd,gBAQhB,C","sources":["components/ContactList/Filter/Filter.styled.js","components/ContactList/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const WrapFilter = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n\n  background-color: rgb(51, 51, 51);\n  padding: 10px 30px;\n\n  @media screen and (min-width: 1280px) {\n    width: 600px;\n    margin: 0 auto;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  color: #fff;\n\n  @media screen and (max-width: 400px) {\n    gap: 8px;\n    flex-direction: column;\n  }\n\n  & input {\n    width: 100%;\n    flex: 1 1 0;\n    padding-left: 8px;\n    border: none;\n    background-color: transparent;\n    color: #fff;\n    border-bottom: 1px solid #fff;\n\n    font-size: 16px;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { getVisibleContact } from 'redux/filterSlice/filterSlice';\n\nimport { Label, WrapFilter } from './Filter.styled';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(state => state.filterValue);\n\n  return (\n    <WrapFilter>\n      <Label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          value={filter}\n          onChange={e => dispatch(getVisibleContact(e.target.value))}\n          placeholder=\"search\"\n        />\n      </Label>\n    </WrapFilter>\n  );\n}\n\nexport default Filter;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ContactsWrap = styled.div`\n  margin: 0 auto;\n  border-radius: 10px;\n  overflow: hidden;\n  box-shadow: rgb(150, 150, 150) 10px 10px 20px;\n\n  @media screen and (min-width: 1280px) {\n    width: 600px;\n    margin: 0 auto;\n  }\n`;\n\nexport const AddLink = styled(Link)`\n  color: rgb(0, 177, 163);\n`;\n\nexport const WelcomeMessage = styled.p`\n  text-align: center;\n`;\n\nexport const ContactContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  padding: 20px 30px;\n\n  background-color: #fff;\n\n  @media screen and (min-width: 1280px) {\n    width: 600px;\n    margin: 0 auto;\n  }\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  /* border-bottom: 1px solid black; */\n  padding: 5px 10px;\n\n  background-color: rgb(51, 51, 51);\n  border-radius: 8px;\n  color: #fff;\n\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n\n  & button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    border: none;\n    padding: 2px 4px;\n    border-radius: 5px;\n    background-color: rgb(51, 51, 51);\n    color: #fff;\n\n    transition: background-color 250ms linear;\n\n    & svg {\n      width: 30px;\n      height: auto;\n    }\n\n    &:disabled {\n      opacity: 20%;\n    }\n\n    &:hover {\n      background-color: rgb(112 0 0);\n    }\n  }\n`;\n\nexport const ContactWrap = styled.div`\n  display: flex;\n  gap: 5px;\n\n  @media screen and (max-width: 480px) {\n    flex-direction: column;\n    font-size: 17px;\n  }\n`;\n\nexport const TelLink = styled.a`\n  border-bottom: solid 1px #fff;\n\n  &:hover {\n    color: rgb(0, 177, 163);\n    border-bottom: solid 1px rgb(0, 177, 163);\n  }\n`;\n\nexport const ButtonsWrap = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TiDeleteOutline } from 'react-icons/ti';\nimport { toast } from 'react-toastify';\n\nimport Filter from './Filter/Filter';\nimport Loader from 'components/Loader/Loader';\n\nimport {\n  deleteContactThunk,\n  getContactsThunk,\n} from 'redux/thunk/contactsThunk';\n\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n  selectIsRefreshing,\n  selectToken,\n  selectUser,\n} from 'redux/selector/selectors';\n\nimport {\n  AddLink,\n  ButtonsWrap,\n  ContactContainer,\n  ContactWrap,\n  ContactsWrap,\n  Item,\n  TelLink,\n  WelcomeMessage,\n} from './ContactList.styled';\n\nfunction ContactList() {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const token = useSelector(selectToken);\n  const user = useSelector(selectUser);\n  const isRefreshing = useSelector(selectIsRefreshing);\n\n  const isContactsEmpty = Boolean(contacts.length);\n  const normalizeFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(el =>\n    el.name.toLowerCase().includes(normalizeFilter)\n  );\n\n  useEffect(() => {\n    token && dispatch(getContactsThunk(token));\n  }, [dispatch, token]);\n\n  const handelDelete = id => {\n    dispatch(deleteContactThunk(id))\n      .unwrap()\n      .then(user => {\n        toast.success(`${user.name} removed from contacts.`);\n      })\n      .catch(() => toast.error('Sorry something went wrong try again'));\n  };\n\n  return (\n    <>\n      {isRefreshing && <Loader />}\n      <ContactsWrap>\n        {!isContactsEmpty && !isRefreshing && !isLoading && (\n          <ContactContainer>\n            <WelcomeMessage>\n              Hello {user.name} please{' '}\n              {<AddLink to=\"/phone-book/add\">add</AddLink>} your first contact\n            </WelcomeMessage>\n          </ContactContainer>\n        )}\n\n        {isContactsEmpty && (\n          <>\n            <Filter />\n            <ContactContainer>\n              <ul>\n                {visibleContacts.map(({ id, name, number }) => {\n                  return (\n                    <Item key={id}>\n                      <ContactWrap>\n                        <p>{name}: </p>{' '}\n                        <TelLink href={`tel:${number}`}>{number}</TelLink>\n                      </ContactWrap>\n                      <ButtonsWrap>\n                        {isLoading && <Loader size={'30'} />}\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            handelDelete(id);\n                          }}\n                          disabled={isLoading}\n                        >\n                          <TiDeleteOutline />\n                        </button>\n                      </ButtonsWrap>\n                    </Item>\n                  );\n                })}\n              </ul>\n            </ContactContainer>\n          </>\n        )}\n      </ContactsWrap>\n    </>\n  );\n}\n\nexport default ContactList;\n"],"names":["WrapFilter","styled","Label","dispatch","useDispatch","filter","useSelector","state","filterValue","type","value","onChange","e","getVisibleContact","target","placeholder","ContactsWrap","AddLink","Link","WelcomeMessage","ContactContainer","Item","ContactWrap","TelLink","ButtonsWrap","contacts","selectContacts","selectFilter","isLoading","selectIsLoading","token","selectToken","user","selectUser","isRefreshing","selectIsRefreshing","isContactsEmpty","Boolean","length","normalizeFilter","toLowerCase","visibleContacts","el","name","includes","useEffect","getContactsThunk","Loader","to","map","id","number","href","size","onClick","deleteContactThunk","unwrap","then","toast","catch","handelDelete","disabled"],"sourceRoot":""}